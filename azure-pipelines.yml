trigger:
  branches:
    include:
    - daveta-python-functional
    exclude:
    - master

resources:
  containers:
  - container: functionaltest
    image: nightlye2etest.azurecr.io/functionaltestpy:latest
    endpoint: NightlyE2E-Acr

variables:
  # Container registry service connection established during pipeline creation
  imageName: 'functionaltestpy'
  dockerRegistryServiceConnection: 'NightlyE2E-Acr'
  dockerFilePath: 'libraries/functional-tests/functionaltestbot/Dockerfile'
  MyBuildId: $(Build.BuildNumber)

jobs:
# Build and publish container
- job: buildPush
  pool:
    vmImage: 'Ubuntu-16.04'
  displayName: Build and push bot image
  continueOnError: false

  steps:
  - task: Docker@2
    displayName: Build and push bot image
    inputs:
      command: buildAndPush
      repository: $(imageName)
      dockerfile: $(dockerFilePath)
      containerRegistry: $(dockerRegistryServiceConnection)
      tags: $(MyBuildId)
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'manifests'
      targetPath: 'manifests'

- job: provisionContainer
  displayName: Provision bot container
  pool:
    vmImage: 'Ubuntu-16.04'
  dependsOn:
  - buildPush
  steps:
  - task: DownloadPipelineArtifact@1
    inputs:
      artifactName: 'manifests'
      downloadPath: '$(System.ArtifactsDirectory)/manifests'
  - task: AzureRMWebAppDeployment@4
    displayName: Azure App Service Deploy
    inputs:
      appType: webAppContainer
      ConnectedServiceName: $(azureSubscriptionEndpoint)
      WebAppName: $(WebAppName)
      DockerNamespace: $(DockerNamespace)
      DockerRepository: $(DockerRepository)
      DockerImageTag: $(Build.BuildId)
  - script: flask run --port 3978 --host 0.0.0.0
