# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class Activity(Model):
    """An Activity is the basic communication type for the Bot Framework 3.0
    protocol.

    :param type: Contains the activity type. Possible values include:
     'message', 'contactRelationUpdate', 'conversationUpdate', 'typing',
     'endOfConversation', 'event', 'invoke', 'deleteUserData', 'messageUpdate',
     'messageDelete', 'installationUpdate', 'messageReaction', 'suggestion',
     'trace', 'handoff'
    :type type: str or ~botframework.connector.models.ActivityTypes
    :param id: Contains an ID that uniquely identifies the activity on the
     channel.
    :type id: str
    :param timestamp: Contains the date and time that the message was sent, in
     UTC, expressed in ISO-8601 format.
    :type timestamp: datetime
    :param local_timestamp: Contains the local date and time of the message
     expressed in ISO-8601 format.
     For example, 2016-09-23T13:07:49.4714686-07:00.
    :type local_timestamp: datetime
    :param local_timezone: Contains the name of the local timezone of the message,
     expressed in IANA Time Zone database format.
     For example, America/Los_Angeles.
    :type local_timezone: str
    :param service_url: Contains the URL that specifies the channel's service
     endpoint. Set by the channel.
    :type service_url: str
    :param channel_id: Contains an ID that uniquely identifies the channel.
     Set by the channel.
    :type channel_id: str
    :param from_property: Identifies the sender of the message.
    :type from_property: ~botframework.connector.models.ChannelAccount
    :param conversation: Identifies the conversation to which the activity
     belongs.
    :type conversation: ~botframework.connector.models.ConversationAccount
    :param recipient: Identifies the recipient of the message.
    :type recipient: ~botframework.connector.models.ChannelAccount
    :param text_format: Format of text fields Default:markdown. Possible
     values include: 'markdown', 'plain', 'xml'
    :type text_format: str or ~botframework.connector.models.TextFormatTypes
    :param attachment_layout: The layout hint for multiple attachments.
     Default: list. Possible values include: 'list', 'carousel'
    :type attachment_layout: str or
     ~botframework.connector.models.AttachmentLayoutTypes
    :param members_added: The collection of members added to the conversation.
    :type members_added: list[~botframework.connector.models.ChannelAccount]
    :param members_removed: The collection of members removed from the
     conversation.
    :type members_removed: list[~botframework.connector.models.ChannelAccount]
    :param reactions_added: The collection of reactions added to the
     conversation.
    :type reactions_added:
     list[~botframework.connector.models.MessageReaction]
    :param reactions_removed: The collection of reactions removed from the
     conversation.
    :type reactions_removed:
     list[~botframework.connector.models.MessageReaction]
    :param topic_name: The updated topic name of the conversation.
    :type topic_name: str
    :param history_disclosed: Indicates whether the prior history of the
     channel is disclosed.
    :type history_disclosed: bool
    :param locale: A locale name for the contents of the text field.
     The locale name is a combination of an ISO 639 two- or three-letter
     culture code associated with a language
     and an ISO 3166 two-letter subculture code associated with a country or
     region.
     The locale name can also correspond to a valid BCP-47 language tag.
    :type locale: str
    :param text: The text content of the message.
    :type text: str
    :param speak: The text to speak.
    :type speak: str
    :param input_hint: Indicates whether your bot is accepting,
     expecting, or ignoring user input after the message is delivered to the
     client. Possible values include: 'acceptingInput', 'ignoringInput',
     'expectingInput'
    :type input_hint: str or ~botframework.connector.models.InputHints
    :param summary: The text to display if the channel cannot render cards.
    :type summary: str
    :param suggested_actions: The suggested actions for the activity.
    :type suggested_actions: ~botframework.connector.models.SuggestedActions
    :param attachments: Attachments
    :type attachments: list[~botframework.connector.models.Attachment]
    :param entities: Represents the entities that were mentioned in the
     message.
    :type entities: list[~botframework.connector.models.Entity]
    :param channel_data: Contains channel-specific content.
    :type channel_data: object
    :param action: Indicates whether the recipient of a contactRelationUpdate
     was added or removed from the sender's contact list.
    :type action: str
    :param reply_to_id: Contains the ID of the message to which this message
     is a reply.
    :type reply_to_id: str
    :param label: A descriptive label for the activity.
    :type label: str
    :param value_type: The type of the activity's value object.
    :type value_type: str
    :param value: A value that is associated with the activity.
    :type value: object
    :param name: The name of the operation associated with an invoke or event
     activity.
    :type name: str
    :param relates_to: A reference to another conversation or activity.
    :type relates_to: ~botframework.connector.models.ConversationReference
    :param code: The a code for endOfConversation activities that indicates
     why the conversation ended. Possible values include: 'unknown',
     'completedSuccessfully', 'userCancelled', 'botTimedOut',
     'botIssuedInvalidMessage', 'channelFailed'
    :type code: str or ~botframework.connector.models.EndOfConversationCodes
    :param expiration: The time at which the activity should be considered to
     be "expired" and should not be presented to the recipient.
    :type expiration: datetime
    :param importance: The importance of the activity. Possible values
     include: 'low', 'normal', 'high'
    :type importance: str or ~botframework.connector.models.ActivityImportance
    :param delivery_mode: A delivery hint to signal to the recipient alternate
     delivery paths for the activity.
     The default delivery mode is "default". Possible values include: 'normal',
     'notification'
    :type delivery_mode: str or ~botframework.connector.models.DeliveryModes
    :param listen_for: List of phrases and references that speech and language
     priming systems should listen for
    :type listen_for: list[str]
    :param text_highlights: The collection of text fragments to highlight when
     the activity contains a ReplyToId value.
    :type text_highlights: list[~botframework.connector.models.TextHighlight]
    :param semantic_action: An optional programmatic action accompanying this
     request
    :type semantic_action: ~botframework.connector.models.SemanticAction
    :param caller_id: A string containing an IRI identifying the caller of a
     bot. This field is not intended to be transmitted over the wire, but is
     instead populated by bots and clients based on cryptographically 
     verifiable data that asserts the identity of the callers (e.g. tokens).
    :type caller_id: str
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "timestamp": {"key": "timestamp", "type": "iso-8601"},
        "local_timestamp": {"key": "localTimestamp", "type": "iso-8601"},
        "local_timezone": {"key": "localTimezone", "type": "str"},
        "service_url": {"key": "serviceUrl", "type": "str"},
        "channel_id": {"key": "channelId", "type": "str"},
        "from_property": {"key": "from", "type": "ChannelAccount"},
        "conversation": {"key": "conversation", "type": "ConversationAccount"},
        "recipient": {"key": "recipient", "type": "ChannelAccount"},
        "text_format": {"key": "textFormat", "type": "str"},
        "attachment_layout": {"key": "attachmentLayout", "type": "str"},
        "members_added": {"key": "membersAdded", "type": "[ChannelAccount]"},
        "members_removed": {"key": "membersRemoved", "type": "[ChannelAccount]"},
        "reactions_added": {"key": "reactionsAdded", "type": "[MessageReaction]"},
        "reactions_removed": {"key": "reactionsRemoved", "type": "[MessageReaction]"},
        "topic_name": {"key": "topicName", "type": "str"},
        "history_disclosed": {"key": "historyDisclosed", "type": "bool"},
        "locale": {"key": "locale", "type": "str"},
        "text": {"key": "text", "type": "str"},
        "speak": {"key": "speak", "type": "str"},
        "input_hint": {"key": "inputHint", "type": "str"},
        "summary": {"key": "summary", "type": "str"},
        "suggested_actions": {"key": "suggestedActions", "type": "SuggestedActions"},
        "attachments": {"key": "attachments", "type": "[Attachment]"},
        "entities": {"key": "entities", "type": "[Entity]"},
        "channel_data": {"key": "channelData", "type": "object"},
        "action": {"key": "action", "type": "str"},
        "reply_to_id": {"key": "replyToId", "type": "str"},
        "label": {"key": "label", "type": "str"},
        "value_type": {"key": "valueType", "type": "str"},
        "value": {"key": "value", "type": "object"},
        "name": {"key": "name", "type": "str"},
        "relates_to": {"key": "relatesTo", "type": "ConversationReference"},
        "code": {"key": "code", "type": "str"},
        "expiration": {"key": "expiration", "type": "iso-8601"},
        "importance": {"key": "importance", "type": "str"},
        "delivery_mode": {"key": "deliveryMode", "type": "str"},
        "listen_for": {"key": "listenFor", "type": "[str]"},
        "text_highlights": {"key": "textHighlights", "type": "[TextHighlight]"},
        "semantic_action": {"key": "semanticAction", "type": "SemanticAction"},
        "caller_id": {"key": "callerId", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(Activity, self).__init__(**kwargs)
        self.type = kwargs.get("type", None)
        self.id = kwargs.get("id", None)
        self.timestamp = kwargs.get("timestamp", None)
        self.local_timestamp = kwargs.get("local_timestamp", None)
        self.local_timezone = kwargs.get("local_timezone", None)
        self.service_url = kwargs.get("service_url", None)
        self.channel_id = kwargs.get("channel_id", None)
        self.from_property = kwargs.get("from_property", None)
        self.conversation = kwargs.get("conversation", None)
        self.recipient = kwargs.get("recipient", None)
        self.text_format = kwargs.get("text_format", None)
        self.attachment_layout = kwargs.get("attachment_layout", None)
        self.members_added = kwargs.get("members_added", None)
        self.members_removed = kwargs.get("members_removed", None)
        self.reactions_added = kwargs.get("reactions_added", None)
        self.reactions_removed = kwargs.get("reactions_removed", None)
        self.topic_name = kwargs.get("topic_name", None)
        self.history_disclosed = kwargs.get("history_disclosed", None)
        self.locale = kwargs.get("locale", None)
        self.text = kwargs.get("text", None)
        self.speak = kwargs.get("speak", None)
        self.input_hint = kwargs.get("input_hint", None)
        self.summary = kwargs.get("summary", None)
        self.suggested_actions = kwargs.get("suggested_actions", None)
        self.attachments = kwargs.get("attachments", None)
        self.entities = kwargs.get("entities", None)
        self.channel_data = kwargs.get("channel_data", None)
        self.action = kwargs.get("action", None)
        self.reply_to_id = kwargs.get("reply_to_id", None)
        self.label = kwargs.get("label", None)
        self.value_type = kwargs.get("value_type", None)
        self.value = kwargs.get("value", None)
        self.name = kwargs.get("name", None)
        self.relates_to = kwargs.get("relates_to", None)
        self.code = kwargs.get("code", None)
        self.expiration = kwargs.get("expiration", None)
        self.importance = kwargs.get("importance", None)
        self.delivery_mode = kwargs.get("delivery_mode", None)
        self.listen_for = kwargs.get("listen_for", None)
        self.text_highlights = kwargs.get("text_highlights", None)
        self.semantic_action = kwargs.get("semantic_action", None)
        self.caller_id = kwargs.get("caller_id", None)


class AnimationCard(Model):
    """An animation card (Ex: gif or short video clip).

    :param title: Title of this card
    :type title: str
    :param subtitle: Subtitle of this card
    :type subtitle: str
    :param text: Text of this card
    :type text: str
    :param image: Thumbnail placeholder
    :type image: ~botframework.connector.models.ThumbnailUrl
    :param media: Media URLs for this card. When this field contains more than
     one URL, each URL is an alternative format of the same content.
    :type media: list[~botframework.connector.models.MediaUrl]
    :param buttons: Actions on this card
    :type buttons: list[~botframework.connector.models.CardAction]
    :param shareable: This content may be shared with others (default:true)
    :type shareable: bool
    :param autoloop: Should the client loop playback at end of content
     (default:true)
    :type autoloop: bool
    :param autostart: Should the client automatically start playback of media
     in this card (default:true)
    :type autostart: bool
    :param aspect: Aspect ratio of thumbnail/media placeholder. Allowed values
     are "16:9" and "4:3"
    :type aspect: str
    :param duration: Describes the length of the media content without
     requiring a receiver to open the content. Formatted as an ISO 8601
     Duration field.
    :type duration: str
    :param value: Supplementary parameter for this card
    :type value: object
    """

    _attribute_map = {
        "title": {"key": "title", "type": "str"},
        "subtitle": {"key": "subtitle", "type": "str"},
        "text": {"key": "text", "type": "str"},
        "image": {"key": "image", "type": "ThumbnailUrl"},
        "media": {"key": "media", "type": "[MediaUrl]"},
        "buttons": {"key": "buttons", "type": "[CardAction]"},
        "shareable": {"key": "shareable", "type": "bool"},
        "autoloop": {"key": "autoloop", "type": "bool"},
        "autostart": {"key": "autostart", "type": "bool"},
        "aspect": {"key": "aspect", "type": "str"},
        "duration": {"key": "duration", "type": "str"},
        "value": {"key": "value", "type": "object"},
    }

    def __init__(self, **kwargs):
        super(AnimationCard, self).__init__(**kwargs)
        self.title = kwargs.get("title", None)
        self.subtitle = kwargs.get("subtitle", None)
        self.text = kwargs.get("text", None)
        self.image = kwargs.get("image", None)
        self.media = kwargs.get("media", None)
        self.buttons = kwargs.get("buttons", None)
        self.shareable = kwargs.get("shareable", None)
        self.autoloop = kwargs.get("autoloop", None)
        self.autostart = kwargs.get("autostart", None)
        self.aspect = kwargs.get("aspect", None)
        self.duration = kwargs.get("duration", None)
        self.value = kwargs.get("value", None)


class Attachment(Model):
    """An attachment within an activity.

    :param content_type: mimetype/Contenttype for the file
    :type content_type: str
    :param content_url: Content Url
    :type content_url: str
    :param content: Embedded content
    :type content: object
    :param name: (OPTIONAL) The name of the attachment
    :type name: str
    :param thumbnail_url: (OPTIONAL) Thumbnail associated with attachment
    :type thumbnail_url: str
    """

    _attribute_map = {
        "content_type": {"key": "contentType", "type": "str"},
        "content_url": {"key": "contentUrl", "type": "str"},
        "content": {"key": "content", "type": "object"},
        "name": {"key": "name", "type": "str"},
        "thumbnail_url": {"key": "thumbnailUrl", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(Attachment, self).__init__(**kwargs)
        self.content_type = kwargs.get("content_type", None)
        self.content_url = kwargs.get("content_url", None)
        self.content = kwargs.get("content", None)
        self.name = kwargs.get("name", None)
        self.thumbnail_url = kwargs.get("thumbnail_url", None)


class AttachmentData(Model):
    """Attachment data.

    :param type: Content-Type of the attachment
    :type type: str
    :param name: Name of the attachment
    :type name: str
    :param original_base64: Attachment content
    :type original_base64: bytearray
    :param thumbnail_base64: Attachment thumbnail
    :type thumbnail_base64: bytearray
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "original_base64": {"key": "originalBase64", "type": "bytearray"},
        "thumbnail_base64": {"key": "thumbnailBase64", "type": "bytearray"},
    }

    def __init__(self, **kwargs):
        super(AttachmentData, self).__init__(**kwargs)
        self.type = kwargs.get("type", None)
        self.name = kwargs.get("name", None)
        self.original_base64 = kwargs.get("original_base64", None)
        self.thumbnail_base64 = kwargs.get("thumbnail_base64", None)


class AttachmentInfo(Model):
    """Metadata for an attachment.

    :param name: Name of the attachment
    :type name: str
    :param type: ContentType of the attachment
    :type type: str
    :param views: attachment views
    :type views: list[~botframework.connector.models.AttachmentView]
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "views": {"key": "views", "type": "[AttachmentView]"},
    }

    def __init__(self, **kwargs):
        super(AttachmentInfo, self).__init__(**kwargs)
        self.name = kwargs.get("name", None)
        self.type = kwargs.get("type", None)
        self.views = kwargs.get("views", None)


class AttachmentView(Model):
    """Attachment View name and size.

    :param view_id: Id of the attachment
    :type view_id: str
    :param size: Size of the attachment
    :type size: int
    """

    _attribute_map = {
        "view_id": {"key": "viewId", "type": "str"},
        "size": {"key": "size", "type": "int"},
    }

    def __init__(self, **kwargs):
        super(AttachmentView, self).__init__(**kwargs)
        self.view_id = kwargs.get("view_id", None)
        self.size = kwargs.get("size", None)


class AudioCard(Model):
    """Audio card.

    :param title: Title of this card
    :type title: str
    :param subtitle: Subtitle of this card
    :type subtitle: str
    :param text: Text of this card
    :type text: str
    :param image: Thumbnail placeholder
    :type image: ~botframework.connector.models.ThumbnailUrl
    :param media: Media URLs for this card. When this field contains more than
     one URL, each URL is an alternative format of the same content.
    :type media: list[~botframework.connector.models.MediaUrl]
    :param buttons: Actions on this card
    :type buttons: list[~botframework.connector.models.CardAction]
    :param shareable: This content may be shared with others (default:true)
    :type shareable: bool
    :param autoloop: Should the client loop playback at end of content
     (default:true)
    :type autoloop: bool
    :param autostart: Should the client automatically start playback of media
     in this card (default:true)
    :type autostart: bool
    :param aspect: Aspect ratio of thumbnail/media placeholder. Allowed values
     are "16:9" and "4:3"
    :type aspect: str
    :param duration: Describes the length of the media content without
     requiring a receiver to open the content. Formatted as an ISO 8601
     Duration field.
    :type duration: str
    :param value: Supplementary parameter for this card
    :type value: object
    """

    _attribute_map = {
        "title": {"key": "title", "type": "str"},
        "subtitle": {"key": "subtitle", "type": "str"},
        "text": {"key": "text", "type": "str"},
        "image": {"key": "image", "type": "ThumbnailUrl"},
        "media": {"key": "media", "type": "[MediaUrl]"},
        "buttons": {"key": "buttons", "type": "[CardAction]"},
        "shareable": {"key": "shareable", "type": "bool"},
        "autoloop": {"key": "autoloop", "type": "bool"},
        "autostart": {"key": "autostart", "type": "bool"},
        "aspect": {"key": "aspect", "type": "str"},
        "duration": {"key": "duration", "type": "str"},
        "value": {"key": "value", "type": "object"},
    }

    def __init__(self, **kwargs):
        super(AudioCard, self).__init__(**kwargs)
        self.title = kwargs.get("title", None)
        self.subtitle = kwargs.get("subtitle", None)
        self.text = kwargs.get("text", None)
        self.image = kwargs.get("image", None)
        self.media = kwargs.get("media", None)
        self.buttons = kwargs.get("buttons", None)
        self.shareable = kwargs.get("shareable", None)
        self.autoloop = kwargs.get("autoloop", None)
        self.autostart = kwargs.get("autostart", None)
        self.aspect = kwargs.get("aspect", None)
        self.duration = kwargs.get("duration", None)
        self.value = kwargs.get("value", None)


class BasicCard(Model):
    """A basic card.

    :param title: Title of the card
    :type title: str
    :param subtitle: Subtitle of the card
    :type subtitle: str
    :param text: Text for the card
    :type text: str
    :param images: Array of images for the card
    :type images: list[~botframework.connector.models.CardImage]
    :param buttons: Set of actions applicable to the current card
    :type buttons: list[~botframework.connector.models.CardAction]
    :param tap: This action will be activated when user taps on the card
     itself
    :type tap: ~botframework.connector.models.CardAction
    """

    _attribute_map = {
        "title": {"key": "title", "type": "str"},
        "subtitle": {"key": "subtitle", "type": "str"},
        "text": {"key": "text", "type": "str"},
        "images": {"key": "images", "type": "[CardImage]"},
        "buttons": {"key": "buttons", "type": "[CardAction]"},
        "tap": {"key": "tap", "type": "CardAction"},
    }

    def __init__(self, **kwargs):
        super(BasicCard, self).__init__(**kwargs)
        self.title = kwargs.get("title", None)
        self.subtitle = kwargs.get("subtitle", None)
        self.text = kwargs.get("text", None)
        self.images = kwargs.get("images", None)
        self.buttons = kwargs.get("buttons", None)
        self.tap = kwargs.get("tap", None)


class CardAction(Model):
    """A clickable action.

    :param type: The type of action implemented by this button. Possible
     values include: 'openUrl', 'imBack', 'postBack', 'playAudio', 'playVideo',
     'showImage', 'downloadFile', 'signin', 'call', 'payment', 'messageBack'
    :type type: str or ~botframework.connector.models.ActionTypes
    :param title: Text description which appears on the button
    :type title: str
    :param image: Image URL which will appear on the button, next to text
     label
    :type image: str
    :param text: Text for this action
    :type text: str
    :param display_text: (Optional) text to display in the chat feed if the
     button is clicked
    :type display_text: str
    :param value: Supplementary parameter for action. Content of this property
     depends on the ActionType
    :type value: object
    :param channel_data: Channel-specific data associated with this action
    :type channel_data: object
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "title": {"key": "title", "type": "str"},
        "image": {"key": "image", "type": "str"},
        "text": {"key": "text", "type": "str"},
        "display_text": {"key": "displayText", "type": "str"},
        "value": {"key": "value", "type": "object"},
        "channel_data": {"key": "channelData", "type": "object"},
    }

    def __init__(self, **kwargs):
        super(CardAction, self).__init__(**kwargs)
        self.type = kwargs.get("type", None)
        self.title = kwargs.get("title", None)
        self.image = kwargs.get("image", None)
        self.text = kwargs.get("text", None)
        self.display_text = kwargs.get("display_text", None)
        self.value = kwargs.get("value", None)
        self.channel_data = kwargs.get("channel_data", None)


class CardImage(Model):
    """An image on a card.

    :param url: URL thumbnail image for major content property
    :type url: str
    :param alt: Image description intended for screen readers
    :type alt: str
    :param tap: Action assigned to specific Attachment
    :type tap: ~botframework.connector.models.CardAction
    """

    _attribute_map = {
        "url": {"key": "url", "type": "str"},
        "alt": {"key": "alt", "type": "str"},
        "tap": {"key": "tap", "type": "CardAction"},
    }

    def __init__(self, **kwargs):
        super(CardImage, self).__init__(**kwargs)
        self.url = kwargs.get("url", None)
        self.alt = kwargs.get("alt", None)
        self.tap = kwargs.get("tap", None)


class ChannelAccount(Model):
    """Channel account information needed to route a message.

    :param id: Channel id for the user or bot on this channel (Example:
     joe@smith.com, or @joesmith or 123456)
    :type id: str
    :param name: Display friendly name
    :type name: str
    :param aad_object_id: This account's object ID within Azure Active
     Directory (AAD)
    :type aad_object_id: str
    :param role: Role of the entity behind the account (Example: User, Bot,
     etc.). Possible values include: 'user', 'bot'
    :type role: str or ~botframework.connector.models.RoleTypes
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "aad_object_id": {"key": "aadObjectId", "type": "str"},
        "role": {"key": "role", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ChannelAccount, self).__init__(**kwargs)
        self.id = kwargs.get("id", None)
        self.name = kwargs.get("name", None)
        self.aad_object_id = kwargs.get("aad_object_id", None)
        self.role = kwargs.get("role", None)


class ConversationAccount(Model):
    """Conversation account represents the identity of the conversation within a channel.

    :param is_group: Indicates whether the conversation contains more than two
     participants at the time the activity was generated
    :type is_group: bool
    :param conversation_type: Indicates the type of the conversation in
     channels that distinguish between conversation types
    :type conversation_type: str
    :param id: Channel id for the user or bot on this channel (Example:
     joe@smith.com, or @joesmith or 123456)
    :type id: str
    :param name: Display friendly name
    :type name: str
    :param aad_object_id: This account's object ID within Azure Active
     Directory (AAD)
    :type aad_object_id: str
    :param role: Role of the entity behind the account (Example: User, Bot,
     etc.). Possible values include: 'user', 'bot'
    :type role: str or ~botframework.connector.models.RoleTypes
    :param tenant_id: This conversation's tenant ID
    :type tenant_id: str
    """

    _attribute_map = {
        "is_group": {"key": "isGroup", "type": "bool"},
        "conversation_type": {"key": "conversationType", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "aad_object_id": {"key": "aadObjectId", "type": "str"},
        "role": {"key": "role", "type": "str"},
        "tenant_id": {"key": "tenantID", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ConversationAccount, self).__init__(**kwargs)
        self.is_group = kwargs.get("is_group", None)
        self.conversation_type = kwargs.get("conversation_type", None)
        self.id = kwargs.get("id", None)
        self.name = kwargs.get("name", None)
        self.aad_object_id = kwargs.get("aad_object_id", None)
        self.role = kwargs.get("role", None)
        self.tenant_id = kwargs.get("tenant_id", None)


class ConversationMembers(Model):
    """Conversation and its members.

    :param id: Conversation ID
    :type id: str
    :param members: List of members in this conversation
    :type members: list[~botframework.connector.models.ChannelAccount]
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "members": {"key": "members", "type": "[ChannelAccount]"},
    }

    def __init__(self, **kwargs):
        super(ConversationMembers, self).__init__(**kwargs)
        self.id = kwargs.get("id", None)
        self.members = kwargs.get("members", None)


class ConversationParameters(Model):
    """Parameters for creating a new conversation.

    :param is_group: IsGroup
    :type is_group: bool
    :param bot: The bot address for this conversation
    :type bot: ~botframework.connector.models.ChannelAccount
    :param members: Members to add to the conversation
    :type members: list[~botframework.connector.models.ChannelAccount]
    :param topic_name: (Optional) Topic of the conversation (if supported by
     the channel)
    :type topic_name: str
    :param activity: (Optional) When creating a new conversation, use this
     activity as the initial message to the conversation
    :type activity: ~botframework.connector.models.Activity
    :param channel_data: Channel specific payload for creating the
     conversation
    :type channel_data: object
    :param tenant_id: (Optional) The tenant ID in which the conversation should be created
    :type tenant_id: str
    """

    _attribute_map = {
        "is_group": {"key": "isGroup", "type": "bool"},
        "bot": {"key": "bot", "type": "ChannelAccount"},
        "members": {"key": "members", "type": "[ChannelAccount]"},
        "topic_name": {"key": "topicName", "type": "str"},
        "activity": {"key": "activity", "type": "Activity"},
        "channel_data": {"key": "channelData", "type": "object"},
        "tenant_id": {"key": "tenantID", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ConversationParameters, self).__init__(**kwargs)
        self.is_group = kwargs.get("is_group", None)
        self.bot = kwargs.get("bot", None)
        self.members = kwargs.get("members", None)
        self.topic_name = kwargs.get("topic_name", None)
        self.activity = kwargs.get("activity", None)
        self.channel_data = kwargs.get("channel_data", None)
        self.tenant_id = kwargs.get("tenant_id", None)


class ConversationReference(Model):
    """An object relating to a particular point in a conversation.

    :param activity_id: (Optional) ID of the activity to refer to
    :type activity_id: str
    :param user: (Optional) User participating in this conversation
    :type user: ~botframework.connector.models.ChannelAccount
    :param bot: Bot participating in this conversation
    :type bot: ~botframework.connector.models.ChannelAccount
    :param conversation: Conversation reference
    :type conversation: ~botframework.connector.models.ConversationAccount
    :param channel_id: Channel ID
    :type channel_id: str
    :param service_url: Service endpoint where operations concerning the
     referenced conversation may be performed
    :type service_url: str
    """

    _attribute_map = {
        "activity_id": {"key": "activityId", "type": "str"},
        "user": {"key": "user", "type": "ChannelAccount"},
        "bot": {"key": "bot", "type": "ChannelAccount"},
        "conversation": {"key": "conversation", "type": "ConversationAccount"},
        "channel_id": {"key": "channelId", "type": "str"},
        "service_url": {"key": "serviceUrl", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ConversationReference, self).__init__(**kwargs)
        self.activity_id = kwargs.get("activity_id", None)
        self.user = kwargs.get("user", None)
        self.bot = kwargs.get("bot", None)
        self.conversation = kwargs.get("conversation", None)
        self.channel_id = kwargs.get("channel_id", None)
        self.service_url = kwargs.get("service_url", None)


class ConversationResourceResponse(Model):
    """A response containing a resource.

    :param activity_id: ID of the Activity (if sent)
    :type activity_id: str
    :param service_url: Service endpoint where operations concerning the
     conversation may be performed
    :type service_url: str
    :param id: Id of the resource
    :type id: str
    """

    _attribute_map = {
        "activity_id": {"key": "activityId", "type": "str"},
        "service_url": {"key": "serviceUrl", "type": "str"},
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ConversationResourceResponse, self).__init__(**kwargs)
        self.activity_id = kwargs.get("activity_id", None)
        self.service_url = kwargs.get("service_url", None)
        self.id = kwargs.get("id", None)


class ConversationsResult(Model):
    """Conversations result.

    :param continuation_token: Paging token
    :type continuation_token: str
    :param conversations: List of conversations
    :type conversations:
     list[~botframework.connector.models.ConversationMembers]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "conversations": {"key": "conversations", "type": "[ConversationMembers]"},
    }

    def __init__(self, **kwargs):
        super(ConversationsResult, self).__init__(**kwargs)
        self.continuation_token = kwargs.get("continuation_token", None)
        self.conversations = kwargs.get("conversations", None)


class Entity(Model):
    """Metadata object pertaining to an activity.

    :param type: Type of this entity (RFC 3987 IRI)
    :type type: str
    """

    _attribute_map = {"type": {"key": "type", "type": "str"}}

    def __init__(self, **kwargs):
        super(Entity, self).__init__(**kwargs)
        self.type = kwargs.get("type", None)


class Error(Model):
    """Object representing error information.

    :param code: Error code
    :type code: str
    :param message: Error message
    :type message: str
    :param inner_http_error: Error from inner http call
    :type inner_http_error: ~botframework.connector.models.InnerHttpError
    """

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "inner_http_error": {"key": "innerHttpError", "type": "InnerHttpError"},
    }

    def __init__(self, **kwargs):
        super(Error, self).__init__(**kwargs)
        self.code = kwargs.get("code", None)
        self.message = kwargs.get("message", None)
        self.inner_http_error = kwargs.get("inner_http_error", None)


class ErrorResponse(Model):
    """An HTTP API response.

    :param error: Error message
    :type error: ~botframework.connector.models.Error
    """

    _attribute_map = {"error": {"key": "error", "type": "Error"}}

    def __init__(self, **kwargs):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = kwargs.get("error", None)


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(
            deserialize, response, "ErrorResponse", *args
        )


class Fact(Model):
    """Set of key-value pairs. Advantage of this section is that key and value
    properties will be
    rendered with default style information with some delimiter between them.
    So there is no need for developer to specify style information.

    :param key: The key for this Fact
    :type key: str
    :param value: The value for this Fact
    :type value: str
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(Fact, self).__init__(**kwargs)
        self.key = kwargs.get("key", None)
        self.value = kwargs.get("value", None)


class GeoCoordinates(Model):
    """GeoCoordinates (entity type: "https://schema.org/GeoCoordinates").

    :param elevation: Elevation of the location [WGS
     84](https://en.wikipedia.org/wiki/World_Geodetic_System)
    :type elevation: float
    :param latitude: Latitude of the location [WGS
     84](https://en.wikipedia.org/wiki/World_Geodetic_System)
    :type latitude: float
    :param longitude: Longitude of the location [WGS
     84](https://en.wikipedia.org/wiki/World_Geodetic_System)
    :type longitude: float
    :param type: The type of the thing
    :type type: str
    :param name: The name of the thing
    :type name: str
    """

    _attribute_map = {
        "elevation": {"key": "elevation", "type": "float"},
        "latitude": {"key": "latitude", "type": "float"},
        "longitude": {"key": "longitude", "type": "float"},
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(GeoCoordinates, self).__init__(**kwargs)
        self.elevation = kwargs.get("elevation", None)
        self.latitude = kwargs.get("latitude", None)
        self.longitude = kwargs.get("longitude", None)
        self.type = kwargs.get("type", None)
        self.name = kwargs.get("name", None)


class HeroCard(Model):
    """A Hero card (card with a single, large image).

    :param title: Title of the card
    :type title: str
    :param subtitle: Subtitle of the card
    :type subtitle: str
    :param text: Text for the card
    :type text: str
    :param images: Array of images for the card
    :type images: list[~botframework.connector.models.CardImage]
    :param buttons: Set of actions applicable to the current card
    :type buttons: list[~botframework.connector.models.CardAction]
    :param tap: This action will be activated when user taps on the card
     itself
    :type tap: ~botframework.connector.models.CardAction
    """

    _attribute_map = {
        "title": {"key": "title", "type": "str"},
        "subtitle": {"key": "subtitle", "type": "str"},
        "text": {"key": "text", "type": "str"},
        "images": {"key": "images", "type": "[CardImage]"},
        "buttons": {"key": "buttons", "type": "[CardAction]"},
        "tap": {"key": "tap", "type": "CardAction"},
    }

    def __init__(self, **kwargs):
        super(HeroCard, self).__init__(**kwargs)
        self.title = kwargs.get("title", None)
        self.subtitle = kwargs.get("subtitle", None)
        self.text = kwargs.get("text", None)
        self.images = kwargs.get("images", None)
        self.buttons = kwargs.get("buttons", None)
        self.tap = kwargs.get("tap", None)


class InnerHttpError(Model):
    """Object representing inner http error.

    :param status_code: HttpStatusCode from failed request
    :type status_code: int
    :param body: Body from failed request
    :type body: object
    """

    _attribute_map = {
        "status_code": {"key": "statusCode", "type": "int"},
        "body": {"key": "body", "type": "object"},
    }

    def __init__(self, **kwargs):
        super(InnerHttpError, self).__init__(**kwargs)
        self.status_code = kwargs.get("status_code", None)
        self.body = kwargs.get("body", None)


class MediaCard(Model):
    """Media card.

    :param title: Title of this card
    :type title: str
    :param subtitle: Subtitle of this card
    :type subtitle: str
    :param text: Text of this card
    :type text: str
    :param image: Thumbnail placeholder
    :type image: ~botframework.connector.models.ThumbnailUrl
    :param media: Media URLs for this card. When this field contains more than
     one URL, each URL is an alternative format of the same content.
    :type media: list[~botframework.connector.models.MediaUrl]
    :param buttons: Actions on this card
    :type buttons: list[~botframework.connector.models.CardAction]
    :param shareable: This content may be shared with others (default:true)
    :type shareable: bool
    :param autoloop: Should the client loop playback at end of content
     (default:true)
    :type autoloop: bool
    :param autostart: Should the client automatically start playback of media
     in this card (default:true)
    :type autostart: bool
    :param aspect: Aspect ratio of thumbnail/media placeholder. Allowed values
     are "16:9" and "4:3"
    :type aspect: str
    :param duration: Describes the length of the media content without
     requiring a receiver to open the content. Formatted as an ISO 8601
     Duration field.
    :type duration: str
    :param value: Supplementary parameter for this card
    :type value: object
    """

    _attribute_map = {
        "title": {"key": "title", "type": "str"},
        "subtitle": {"key": "subtitle", "type": "str"},
        "text": {"key": "text", "type": "str"},
        "image": {"key": "image", "type": "ThumbnailUrl"},
        "media": {"key": "media", "type": "[MediaUrl]"},
        "buttons": {"key": "buttons", "type": "[CardAction]"},
        "shareable": {"key": "shareable", "type": "bool"},
        "autoloop": {"key": "autoloop", "type": "bool"},
        "autostart": {"key": "autostart", "type": "bool"},
        "aspect": {"key": "aspect", "type": "str"},
        "duration": {"key": "duration", "type": "str"},
        "value": {"key": "value", "type": "object"},
    }

    def __init__(self, **kwargs):
        super(MediaCard, self).__init__(**kwargs)
        self.title = kwargs.get("title", None)
        self.subtitle = kwargs.get("subtitle", None)
        self.text = kwargs.get("text", None)
        self.image = kwargs.get("image", None)
        self.media = kwargs.get("media", None)
        self.buttons = kwargs.get("buttons", None)
        self.shareable = kwargs.get("shareable", None)
        self.autoloop = kwargs.get("autoloop", None)
        self.autostart = kwargs.get("autostart", None)
        self.aspect = kwargs.get("aspect", None)
        self.duration = kwargs.get("duration", None)
        self.value = kwargs.get("value", None)


class MediaEventValue(Model):
    """Supplementary parameter for media events.

    :param card_value: Callback parameter specified in the Value field of the
     MediaCard that originated this event
    :type card_value: object
    """

    _attribute_map = {"card_value": {"key": "cardValue", "type": "object"}}

    def __init__(self, **kwargs):
        super(MediaEventValue, self).__init__(**kwargs)
        self.card_value = kwargs.get("card_value", None)


class MediaUrl(Model):
    """Media URL.

    :param url: Url for the media
    :type url: str
    :param profile: Optional profile hint to the client to differentiate
     multiple MediaUrl objects from each other
    :type profile: str
    """

    _attribute_map = {
        "url": {"key": "url", "type": "str"},
        "profile": {"key": "profile", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(MediaUrl, self).__init__(**kwargs)
        self.url = kwargs.get("url", None)
        self.profile = kwargs.get("profile", None)


class Mention(Model):
    """Mention information (entity type: "mention").

    :param mentioned: The mentioned user
    :type mentioned: ~botframework.connector.models.ChannelAccount
    :param text: Sub Text which represents the mention (can be null or empty)
    :type text: str
    :param type: Type of this entity (RFC 3987 IRI)
    :type type: str
    """

    _attribute_map = {
        "mentioned": {"key": "mentioned", "type": "ChannelAccount"},
        "text": {"key": "text", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(Mention, self).__init__(**kwargs)
        self.mentioned = kwargs.get("mentioned", None)
        self.text = kwargs.get("text", None)
        self.type = kwargs.get("type", None)


class MessageReaction(Model):
    """Message reaction object.

    :param type: Message reaction type. Possible values include: 'like',
     'plusOne'
    :type type: str or ~botframework.connector.models.MessageReactionTypes
    """

    _attribute_map = {"type": {"key": "type", "type": "str"}}

    def __init__(self, **kwargs):
        super(MessageReaction, self).__init__(**kwargs)
        self.type = kwargs.get("type", None)


class MicrosoftPayMethodData(Model):
    """W3C Payment Method Data for Microsoft Pay.

    :param merchant_id: Microsoft Pay Merchant ID
    :type merchant_id: str
    :param supported_networks: Supported payment networks (e.g., "visa" and
     "mastercard")
    :type supported_networks: list[str]
    :param supported_types: Supported payment types (e.g., "credit")
    :type supported_types: list[str]
    """

    _attribute_map = {
        "merchant_id": {"key": "merchantId", "type": "str"},
        "supported_networks": {"key": "supportedNetworks", "type": "[str]"},
        "supported_types": {"key": "supportedTypes", "type": "[str]"},
    }

    def __init__(self, **kwargs):
        super(MicrosoftPayMethodData, self).__init__(**kwargs)
        self.merchant_id = kwargs.get("merchant_id", None)
        self.supported_networks = kwargs.get("supported_networks", None)
        self.supported_types = kwargs.get("supported_types", None)


class OAuthCard(Model):
    """A card representing a request to perform a sign in via OAuth.

    :param text: Text for signin request
    :type text: str
    :param connection_name: The name of the registered connection
    :type connection_name: str
    :param buttons: Action to use to perform signin
    :type buttons: list[~botframework.connector.models.CardAction]
    """

    _attribute_map = {
        "text": {"key": "text", "type": "str"},
        "connection_name": {"key": "connectionName", "type": "str"},
        "buttons": {"key": "buttons", "type": "[CardAction]"},
    }

    def __init__(self, **kwargs):
        super(OAuthCard, self).__init__(**kwargs)
        self.text = kwargs.get("text", None)
        self.connection_name = kwargs.get("connection_name", None)
        self.buttons = kwargs.get("buttons", None)


class PagedMembersResult(Model):
    """Page of members.

    :param continuation_token: Paging token
    :type continuation_token: str
    :param members: The Channel Accounts.
    :type members: list[~botframework.connector.models.ChannelAccount]
    """

    _attribute_map = {
        "continuation_token": {"key": "continuationToken", "type": "str"},
        "members": {"key": "members", "type": "[ChannelAccount]"},
    }

    def __init__(self, **kwargs):
        super(PagedMembersResult, self).__init__(**kwargs)
        self.continuation_token = kwargs.get("continuation_token", None)
        self.members = kwargs.get("members", None)


class PaymentAddress(Model):
    """Address within a Payment Request.

    :param country: This is the CLDR (Common Locale Data Repository) region
     code. For example, US, GB, CN, or JP
    :type country: str
    :param address_line: This is the most specific part of the address. It can
     include, for example, a street name, a house number, apartment number, a
     rural delivery route, descriptive instructions, or a post office box
     number.
    :type address_line: list[str]
    :param region: This is the top level administrative subdivision of the
     country. For example, this can be a state, a province, an oblast, or a
     prefecture.
    :type region: str
    :param city: This is the city/town portion of the address.
    :type city: str
    :param dependent_locality: This is the dependent locality or sublocality
     within a city. For example, used for neighborhoods, boroughs, districts,
     or UK dependent localities.
    :type dependent_locality: str
    :param postal_code: This is the postal code or ZIP code, also known as PIN
     code in India.
    :type postal_code: str
    :param sorting_code: This is the sorting code as used in, for example,
     France.
    :type sorting_code: str
    :param language_code: This is the BCP-47 language code for the address.
     It's used to determine the field separators and the order of fields when
     formatting the address for display.
    :type language_code: str
    :param organization: This is the organization, firm, company, or
     institution at this address.
    :type organization: str
    :param recipient: This is the name of the recipient or contact person.
    :type recipient: str
    :param phone: This is the phone number of the recipient or contact person.
    :type phone: str
    """

    _attribute_map = {
        "country": {"key": "country", "type": "str"},
        "address_line": {"key": "addressLine", "type": "[str]"},
        "region": {"key": "region", "type": "str"},
        "city": {"key": "city", "type": "str"},
        "dependent_locality": {"key": "dependentLocality", "type": "str"},
        "postal_code": {"key": "postalCode", "type": "str"},
        "sorting_code": {"key": "sortingCode", "type": "str"},
        "language_code": {"key": "languageCode", "type": "str"},
        "organization": {"key": "organization", "type": "str"},
        "recipient": {"key": "recipient", "type": "str"},
        "phone": {"key": "phone", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(PaymentAddress, self).__init__(**kwargs)
        self.country = kwargs.get("country", None)
        self.address_line = kwargs.get("address_line", None)
        self.region = kwargs.get("region", None)
        self.city = kwargs.get("city", None)
        self.dependent_locality = kwargs.get("dependent_locality", None)
        self.postal_code = kwargs.get("postal_code", None)
        self.sorting_code = kwargs.get("sorting_code", None)
        self.language_code = kwargs.get("language_code", None)
        self.organization = kwargs.get("organization", None)
        self.recipient = kwargs.get("recipient", None)
        self.phone = kwargs.get("phone", None)


class PaymentCurrencyAmount(Model):
    """Supplies monetary amounts.

    :param currency: A currency identifier
    :type currency: str
    :param value: Decimal monetary value
    :type value: str
    :param currency_system: Currency system
    :type currency_system: str
    """

    _attribute_map = {
        "currency": {"key": "currency", "type": "str"},
        "value": {"key": "value", "type": "str"},
        "currency_system": {"key": "currencySystem", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(PaymentCurrencyAmount, self).__init__(**kwargs)
        self.currency = kwargs.get("currency", None)
        self.value = kwargs.get("value", None)
        self.currency_system = kwargs.get("currency_system", None)


class PaymentDetails(Model):
    """Provides information about the requested transaction.

    :param total: Contains the total amount of the payment request
    :type total: ~botframework.connector.models.PaymentItem
    :param display_items: Contains line items for the payment request that the
     user agent may display
    :type display_items: list[~botframework.connector.models.PaymentItem]
    :param shipping_options: A sequence containing the different shipping
     options for the user to choose from
    :type shipping_options:
     list[~botframework.connector.models.PaymentShippingOption]
    :param modifiers: Contains modifiers for particular payment method
     identifiers
    :type modifiers:
     list[~botframework.connector.models.PaymentDetailsModifier]
    :param error: Error description
    :type error: str
    """

    _attribute_map = {
        "total": {"key": "total", "type": "PaymentItem"},
        "display_items": {"key": "displayItems", "type": "[PaymentItem]"},
        "shipping_options": {
            "key": "shippingOptions",
            "type": "[PaymentShippingOption]",
        },
        "modifiers": {"key": "modifiers", "type": "[PaymentDetailsModifier]"},
        "error": {"key": "error", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(PaymentDetails, self).__init__(**kwargs)
        self.total = kwargs.get("total", None)
        self.display_items = kwargs.get("display_items", None)
        self.shipping_options = kwargs.get("shipping_options", None)
        self.modifiers = kwargs.get("modifiers", None)
        self.error = kwargs.get("error", None)


class PaymentDetailsModifier(Model):
    """Provides details that modify the PaymentDetails based on payment method
    identifier.

    :param supported_methods: Contains a sequence of payment method
     identifiers
    :type supported_methods: list[str]
    :param total: This value overrides the total field in the PaymentDetails
     dictionary for the payment method identifiers in the supportedMethods
     field
    :type total: ~botframework.connector.models.PaymentItem
    :param additional_display_items: Provides additional display items that
     are appended to the displayItems field in the PaymentDetails dictionary
     for the payment method identifiers in the supportedMethods field
    :type additional_display_items:
     list[~botframework.connector.models.PaymentItem]
    :param data: A JSON-serializable object that provides optional information
     that might be needed by the supported payment methods
    :type data: object
    """

    _attribute_map = {
        "supported_methods": {"key": "supportedMethods", "type": "[str]"},
        "total": {"key": "total", "type": "PaymentItem"},
        "additional_display_items": {
            "key": "additionalDisplayItems",
            "type": "[PaymentItem]",
        },
        "data": {"key": "data", "type": "object"},
    }

    def __init__(self, **kwargs):
        super(PaymentDetailsModifier, self).__init__(**kwargs)
        self.supported_methods = kwargs.get("supported_methods", None)
        self.total = kwargs.get("total", None)
        self.additional_display_items = kwargs.get("additional_display_items", None)
        self.data = kwargs.get("data", None)


class PaymentItem(Model):
    """Indicates what the payment request is for and the value asked for.

    :param label: Human-readable description of the item
    :type label: str
    :param amount: Monetary amount for the item
    :type amount: ~botframework.connector.models.PaymentCurrencyAmount
    :param pending: When set to true this flag means that the amount field is
     not final.
    :type pending: bool
    """

    _attribute_map = {
        "label": {"key": "label", "type": "str"},
        "amount": {"key": "amount", "type": "PaymentCurrencyAmount"},
        "pending": {"key": "pending", "type": "bool"},
    }

    def __init__(self, **kwargs):
        super(PaymentItem, self).__init__(**kwargs)
        self.label = kwargs.get("label", None)
        self.amount = kwargs.get("amount", None)
        self.pending = kwargs.get("pending", None)


class PaymentMethodData(Model):
    """Indicates a set of supported payment methods and any associated payment
    method specific data for those methods.

    :param supported_methods: Required sequence of strings containing payment
     method identifiers for payment methods that the merchant web site accepts
    :type supported_methods: list[str]
    :param data: A JSON-serializable object that provides optional information
     that might be needed by the supported payment methods
    :type data: object
    """

    _attribute_map = {
        "supported_methods": {"key": "supportedMethods", "type": "[str]"},
        "data": {"key": "data", "type": "object"},
    }

    def __init__(self, **kwargs):
        super(PaymentMethodData, self).__init__(**kwargs)
        self.supported_methods = kwargs.get("supported_methods", None)
        self.data = kwargs.get("data", None)


class PaymentOptions(Model):
    """Provides information about the options desired for the payment request.

    :param request_payer_name: Indicates whether the user agent should collect
     and return the payer's name as part of the payment request
    :type request_payer_name: bool
    :param request_payer_email: Indicates whether the user agent should
     collect and return the payer's email address as part of the payment
     request
    :type request_payer_email: bool
    :param request_payer_phone: Indicates whether the user agent should
     collect and return the payer's phone number as part of the payment request
    :type request_payer_phone: bool
    :param request_shipping: Indicates whether the user agent should collect
     and return a shipping address as part of the payment request
    :type request_shipping: bool
    :param shipping_type: If requestShipping is set to true, then the
     shippingType field may be used to influence the way the user agent
     presents the user interface for gathering the shipping address
    :type shipping_type: str
    """

    _attribute_map = {
        "request_payer_name": {"key": "requestPayerName", "type": "bool"},
        "request_payer_email": {"key": "requestPayerEmail", "type": "bool"},
        "request_payer_phone": {"key": "requestPayerPhone", "type": "bool"},
        "request_shipping": {"key": "requestShipping", "type": "bool"},
        "shipping_type": {"key": "shippingType", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(PaymentOptions, self).__init__(**kwargs)
        self.request_payer_name = kwargs.get("request_payer_name", None)
        self.request_payer_email = kwargs.get("request_payer_email", None)
        self.request_payer_phone = kwargs.get("request_payer_phone", None)
        self.request_shipping = kwargs.get("request_shipping", None)
        self.shipping_type = kwargs.get("shipping_type", None)


class PaymentRequest(Model):
    """A request to make a payment.

    :param id: ID of this payment request
    :type id: str
    :param method_data: Allowed payment methods for this request
    :type method_data: list[~botframework.connector.models.PaymentMethodData]
    :param details: Details for this request
    :type details: ~botframework.connector.models.PaymentDetails
    :param options: Provides information about the options desired for the
     payment request
    :type options: ~botframework.connector.models.PaymentOptions
    :param expires: Expiration for this request, in ISO 8601 duration format
     (e.g., 'P1D')
    :type expires: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "method_data": {"key": "methodData", "type": "[PaymentMethodData]"},
        "details": {"key": "details", "type": "PaymentDetails"},
        "options": {"key": "options", "type": "PaymentOptions"},
        "expires": {"key": "expires", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(PaymentRequest, self).__init__(**kwargs)
        self.id = kwargs.get("id", None)
        self.method_data = kwargs.get("method_data", None)
        self.details = kwargs.get("details", None)
        self.options = kwargs.get("options", None)
        self.expires = kwargs.get("expires", None)


class PaymentRequestComplete(Model):
    """Payload delivered when completing a payment request.

    :param id: Payment request ID
    :type id: str
    :param payment_request: Initial payment request
    :type payment_request: ~botframework.connector.models.PaymentRequest
    :param payment_response: Corresponding payment response
    :type payment_response: ~botframework.connector.models.PaymentResponse
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "payment_request": {"key": "paymentRequest", "type": "PaymentRequest"},
        "payment_response": {"key": "paymentResponse", "type": "PaymentResponse"},
    }

    def __init__(self, **kwargs):
        super(PaymentRequestComplete, self).__init__(**kwargs)
        self.id = kwargs.get("id", None)
        self.payment_request = kwargs.get("payment_request", None)
        self.payment_response = kwargs.get("payment_response", None)


class PaymentRequestCompleteResult(Model):
    """Result from a completed payment request.

    :param result: Result of the payment request completion
    :type result: str
    """

    _attribute_map = {"result": {"key": "result", "type": "str"}}

    def __init__(self, **kwargs):
        super(PaymentRequestCompleteResult, self).__init__(**kwargs)
        self.result = kwargs.get("result", None)


class PaymentRequestUpdate(Model):
    """An update to a payment request.

    :param id: ID for the payment request to update
    :type id: str
    :param details: Update payment details
    :type details: ~botframework.connector.models.PaymentDetails
    :param shipping_address: Updated shipping address
    :type shipping_address: ~botframework.connector.models.PaymentAddress
    :param shipping_option: Updated shipping options
    :type shipping_option: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "details": {"key": "details", "type": "PaymentDetails"},
        "shipping_address": {"key": "shippingAddress", "type": "PaymentAddress"},
        "shipping_option": {"key": "shippingOption", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(PaymentRequestUpdate, self).__init__(**kwargs)
        self.id = kwargs.get("id", None)
        self.details = kwargs.get("details", None)
        self.shipping_address = kwargs.get("shipping_address", None)
        self.shipping_option = kwargs.get("shipping_option", None)


class PaymentRequestUpdateResult(Model):
    """A result object from a Payment Request Update invoke operation.

    :param details: Update payment details
    :type details: ~botframework.connector.models.PaymentDetails
    """

    _attribute_map = {"details": {"key": "details", "type": "PaymentDetails"}}

    def __init__(self, **kwargs):
        super(PaymentRequestUpdateResult, self).__init__(**kwargs)
        self.details = kwargs.get("details", None)


class PaymentResponse(Model):
    """A PaymentResponse is returned when a user has selected a payment method and
    approved a payment request.

    :param method_name: The payment method identifier for the payment method
     that the user selected to fulfil the transaction
    :type method_name: str
    :param details: A JSON-serializable object that provides a payment method
     specific message used by the merchant to process the transaction and
     determine successful fund transfer
    :type details: object
    :param shipping_address: If the requestShipping flag was set to true in
     the PaymentOptions passed to the PaymentRequest constructor, then
     shippingAddress will be the full and final shipping address chosen by the
     user
    :type shipping_address: ~botframework.connector.models.PaymentAddress
    :param shipping_option: If the requestShipping flag was set to true in the
     PaymentOptions passed to the PaymentRequest constructor, then
     shippingOption will be the id attribute of the selected shipping option
    :type shipping_option: str
    :param payer_email: If the requestPayerEmail flag was set to true in the
     PaymentOptions passed to the PaymentRequest constructor, then payerEmail
     will be the email address chosen by the user
    :type payer_email: str
    :param payer_phone: If the requestPayerPhone flag was set to true in the
     PaymentOptions passed to the PaymentRequest constructor, then payerPhone
     will be the phone number chosen by the user
    :type payer_phone: str
    """

    _attribute_map = {
        "method_name": {"key": "methodName", "type": "str"},
        "details": {"key": "details", "type": "object"},
        "shipping_address": {"key": "shippingAddress", "type": "PaymentAddress"},
        "shipping_option": {"key": "shippingOption", "type": "str"},
        "payer_email": {"key": "payerEmail", "type": "str"},
        "payer_phone": {"key": "payerPhone", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(PaymentResponse, self).__init__(**kwargs)
        self.method_name = kwargs.get("method_name", None)
        self.details = kwargs.get("details", None)
        self.shipping_address = kwargs.get("shipping_address", None)
        self.shipping_option = kwargs.get("shipping_option", None)
        self.payer_email = kwargs.get("payer_email", None)
        self.payer_phone = kwargs.get("payer_phone", None)


class PaymentShippingOption(Model):
    """Describes a shipping option.

    :param id: String identifier used to reference this PaymentShippingOption
    :type id: str
    :param label: Human-readable description of the item
    :type label: str
    :param amount: Contains the monetary amount for the item
    :type amount: ~botframework.connector.models.PaymentCurrencyAmount
    :param selected: Indicates whether this is the default selected
     PaymentShippingOption
    :type selected: bool
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "label": {"key": "label", "type": "str"},
        "amount": {"key": "amount", "type": "PaymentCurrencyAmount"},
        "selected": {"key": "selected", "type": "bool"},
    }

    def __init__(self, **kwargs):
        super(PaymentShippingOption, self).__init__(**kwargs)
        self.id = kwargs.get("id", None)
        self.label = kwargs.get("label", None)
        self.amount = kwargs.get("amount", None)
        self.selected = kwargs.get("selected", None)


class Place(Model):
    """Place (entity type: "https://schema.org/Place").

    :param address: Address of the place (may be `string` or complex object of
     type `PostalAddress`)
    :type address: object
    :param geo: Geo coordinates of the place (may be complex object of type
     `GeoCoordinates` or `GeoShape`)
    :type geo: object
    :param has_map: Map to the place (may be `string` (URL) or complex object
     of type `Map`)
    :type has_map: object
    :param type: The type of the thing
    :type type: str
    :param name: The name of the thing
    :type name: str
    """

    _attribute_map = {
        "address": {"key": "address", "type": "object"},
        "geo": {"key": "geo", "type": "object"},
        "has_map": {"key": "hasMap", "type": "object"},
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(Place, self).__init__(**kwargs)
        self.address = kwargs.get("address", None)
        self.geo = kwargs.get("geo", None)
        self.has_map = kwargs.get("has_map", None)
        self.type = kwargs.get("type", None)
        self.name = kwargs.get("name", None)


class ReceiptCard(Model):
    """A receipt card.

    :param title: Title of the card
    :type title: str
    :param facts: Array of Fact objects
    :type facts: list[~botframework.connector.models.Fact]
    :param items: Array of Receipt Items
    :type items: list[~botframework.connector.models.ReceiptItem]
    :param tap: This action will be activated when user taps on the card
    :type tap: ~botframework.connector.models.CardAction
    :param total: Total amount of money paid (or to be paid)
    :type total: str
    :param tax: Total amount of tax paid (or to be paid)
    :type tax: str
    :param vat: Total amount of VAT paid (or to be paid)
    :type vat: str
    :param buttons: Set of actions applicable to the current card
    :type buttons: list[~botframework.connector.models.CardAction]
    """

    _attribute_map = {
        "title": {"key": "title", "type": "str"},
        "facts": {"key": "facts", "type": "[Fact]"},
        "items": {"key": "items", "type": "[ReceiptItem]"},
        "tap": {"key": "tap", "type": "CardAction"},
        "total": {"key": "total", "type": "str"},
        "tax": {"key": "tax", "type": "str"},
        "vat": {"key": "vat", "type": "str"},
        "buttons": {"key": "buttons", "type": "[CardAction]"},
    }

    def __init__(self, **kwargs):
        super(ReceiptCard, self).__init__(**kwargs)
        self.title = kwargs.get("title", None)
        self.facts = kwargs.get("facts", None)
        self.items = kwargs.get("items", None)
        self.tap = kwargs.get("tap", None)
        self.total = kwargs.get("total", None)
        self.tax = kwargs.get("tax", None)
        self.vat = kwargs.get("vat", None)
        self.buttons = kwargs.get("buttons", None)


class ReceiptItem(Model):
    """An item on a receipt card.

    :param title: Title of the Card
    :type title: str
    :param subtitle: Subtitle appears just below Title field, differs from
     Title in font styling only
    :type subtitle: str
    :param text: Text field appears just below subtitle, differs from Subtitle
     in font styling only
    :type text: str
    :param image: Image
    :type image: ~botframework.connector.models.CardImage
    :param price: Amount with currency
    :type price: str
    :param quantity: Number of items of given kind
    :type quantity: str
    :param tap: This action will be activated when user taps on the Item
     bubble.
    :type tap: ~botframework.connector.models.CardAction
    """

    _attribute_map = {
        "title": {"key": "title", "type": "str"},
        "subtitle": {"key": "subtitle", "type": "str"},
        "text": {"key": "text", "type": "str"},
        "image": {"key": "image", "type": "CardImage"},
        "price": {"key": "price", "type": "str"},
        "quantity": {"key": "quantity", "type": "str"},
        "tap": {"key": "tap", "type": "CardAction"},
    }

    def __init__(self, **kwargs):
        super(ReceiptItem, self).__init__(**kwargs)
        self.title = kwargs.get("title", None)
        self.subtitle = kwargs.get("subtitle", None)
        self.text = kwargs.get("text", None)
        self.image = kwargs.get("image", None)
        self.price = kwargs.get("price", None)
        self.quantity = kwargs.get("quantity", None)
        self.tap = kwargs.get("tap", None)


class ResourceResponse(Model):
    """A response containing a resource ID.

    :param id: Id of the resource
    :type id: str
    """

    _attribute_map = {"id": {"key": "id", "type": "str"}}

    def __init__(self, **kwargs):
        super(ResourceResponse, self).__init__(**kwargs)
        self.id = kwargs.get("id", None)


class SemanticAction(Model):
    """Represents a reference to a programmatic action.

    :param id: ID of this action
    :type id: str
    :param entities: Entities associated with this action
    :type entities: dict[str, ~botframework.connector.models.Entity]
    :param state: State of this action. Allowed values: `start`, `continue`, `done`
    :type state: str or ~botframework.connector.models.SemanticActionStates
    """

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "entities": {"key": "entities", "type": "{Entity}"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(SemanticAction, self).__init__(**kwargs)
        self.id = kwargs.get("id", None)
        self.entities = kwargs.get("entities", None)
        self.state = kwargs.get("state", None)


class SigninCard(Model):
    """A card representing a request to sign in.

    :param text: Text for signin request
    :type text: str
    :param buttons: Action to use to perform signin
    :type buttons: list[~botframework.connector.models.CardAction]
    """

    _attribute_map = {
        "text": {"key": "text", "type": "str"},
        "buttons": {"key": "buttons", "type": "[CardAction]"},
    }

    def __init__(self, **kwargs):
        super(SigninCard, self).__init__(**kwargs)
        self.text = kwargs.get("text", None)
        self.buttons = kwargs.get("buttons", None)


class SuggestedActions(Model):
    """SuggestedActions that can be performed.

    :param to: Ids of the recipients that the actions should be shown to.
     These Ids are relative to the channelId and a subset of all recipients of
     the activity
    :type to: list[str]
    :param actions: Actions that can be shown to the user
    :type actions: list[~botframework.connector.models.CardAction]
    """

    _attribute_map = {
        "to": {"key": "to", "type": "[str]"},
        "actions": {"key": "actions", "type": "[CardAction]"},
    }

    def __init__(self, **kwargs):
        super(SuggestedActions, self).__init__(**kwargs)
        self.to = kwargs.get("to", None)
        self.actions = kwargs.get("actions", None)


class TextHighlight(Model):
    """Refers to a substring of content within another field.

    :param text: Defines the snippet of text to highlight
    :type text: str
    :param occurrence: Occurrence of the text field within the referenced
     text, if multiple exist.
    :type occurrence: int
    """

    _attribute_map = {
        "text": {"key": "text", "type": "str"},
        "occurrence": {"key": "occurrence", "type": "int"},
    }

    def __init__(self, **kwargs):
        super(TextHighlight, self).__init__(**kwargs)
        self.text = kwargs.get("text", None)
        self.occurrence = kwargs.get("occurrence", None)


class Thing(Model):
    """Thing (entity type: "https://schema.org/Thing").

    :param type: The type of the thing
    :type type: str
    :param name: The name of the thing
    :type name: str
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(Thing, self).__init__(**kwargs)
        self.type = kwargs.get("type", None)
        self.name = kwargs.get("name", None)


class ThumbnailCard(Model):
    """A thumbnail card (card with a single, small thumbnail image).

    :param title: Title of the card
    :type title: str
    :param subtitle: Subtitle of the card
    :type subtitle: str
    :param text: Text for the card
    :type text: str
    :param images: Array of images for the card
    :type images: list[~botframework.connector.models.CardImage]
    :param buttons: Set of actions applicable to the current card
    :type buttons: list[~botframework.connector.models.CardAction]
    :param tap: This action will be activated when user taps on the card
     itself
    :type tap: ~botframework.connector.models.CardAction
    """

    _attribute_map = {
        "title": {"key": "title", "type": "str"},
        "subtitle": {"key": "subtitle", "type": "str"},
        "text": {"key": "text", "type": "str"},
        "images": {"key": "images", "type": "[CardImage]"},
        "buttons": {"key": "buttons", "type": "[CardAction]"},
        "tap": {"key": "tap", "type": "CardAction"},
    }

    def __init__(self, **kwargs):
        super(ThumbnailCard, self).__init__(**kwargs)
        self.title = kwargs.get("title", None)
        self.subtitle = kwargs.get("subtitle", None)
        self.text = kwargs.get("text", None)
        self.images = kwargs.get("images", None)
        self.buttons = kwargs.get("buttons", None)
        self.tap = kwargs.get("tap", None)


class ThumbnailUrl(Model):
    """Thumbnail URL.

    :param url: URL pointing to the thumbnail to use for media content
    :type url: str
    :param alt: HTML alt text to include on this thumbnail image
    :type alt: str
    """

    _attribute_map = {
        "url": {"key": "url", "type": "str"},
        "alt": {"key": "alt", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ThumbnailUrl, self).__init__(**kwargs)
        self.url = kwargs.get("url", None)
        self.alt = kwargs.get("alt", None)


class TokenRequest(Model):
    """A request to receive a user token.

    :param provider: The provider to request a user token from
    :type provider: str
    :param settings: A collection of settings for the specific provider for
     this request
    :type settings: dict[str, object]
    """

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "settings": {"key": "settings", "type": "{object}"},
    }

    def __init__(self, **kwargs):
        super(TokenRequest, self).__init__(**kwargs)
        self.provider = kwargs.get("provider", None)
        self.settings = kwargs.get("settings", None)


class TokenResponse(Model):
    """A response that includes a user token.

    :param connection_name: The connection name
    :type connection_name: str
    :param token: The user token
    :type token: str
    :param expiration: Expiration for the token, in ISO 8601 format (e.g.
     "2007-04-05T14:30Z")
    :type expiration: str
    :param channel_id: The channelId of the TokenResponse
    :type channel_id: str
    """

    _attribute_map = {
        "connection_name": {"key": "connectionName", "type": "str"},
        "token": {"key": "token", "type": "str"},
        "expiration": {"key": "expiration", "type": "str"},
        "channel_id": {"key": "channelId", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(TokenResponse, self).__init__(**kwargs)
        self.connection_name = kwargs.get("connection_name", None)
        self.token = kwargs.get("token", None)
        self.expiration = kwargs.get("expiration", None)
        self.channel_id = kwargs.get("channel_id", None)


class Transcript(Model):
    """Transcript.

    :param activities: A collection of Activities that conforms to the
     Transcript schema.
    :type activities: list[~botframework.connector.models.Activity]
    """

    _attribute_map = {"activities": {"key": "activities", "type": "[Activity]"}}

    def __init__(self, **kwargs):
        super(Transcript, self).__init__(**kwargs)
        self.activities = kwargs.get("activities", None)


class VideoCard(Model):
    """Video card.

    :param title: Title of this card
    :type title: str
    :param subtitle: Subtitle of this card
    :type subtitle: str
    :param text: Text of this card
    :type text: str
    :param image: Thumbnail placeholder
    :type image: ~botframework.connector.models.ThumbnailUrl
    :param media: Media URLs for this card. When this field contains more than
     one URL, each URL is an alternative format of the same content.
    :type media: list[~botframework.connector.models.MediaUrl]
    :param buttons: Actions on this card
    :type buttons: list[~botframework.connector.models.CardAction]
    :param shareable: This content may be shared with others (default:true)
    :type shareable: bool
    :param autoloop: Should the client loop playback at end of content
     (default:true)
    :type autoloop: bool
    :param autostart: Should the client automatically start playback of media
     in this card (default:true)
    :type autostart: bool
    :param aspect: Aspect ratio of thumbnail/media placeholder. Allowed values
     are "16:9" and "4:3"
    :type aspect: str
    :param duration: Describes the length of the media content without
     requiring a receiver to open the content. Formatted as an ISO 8601
     Duration field.
    :type duration: str
    :param value: Supplementary parameter for this card
    :type value: object
    """

    _attribute_map = {
        "title": {"key": "title", "type": "str"},
        "subtitle": {"key": "subtitle", "type": "str"},
        "text": {"key": "text", "type": "str"},
        "image": {"key": "image", "type": "ThumbnailUrl"},
        "media": {"key": "media", "type": "[MediaUrl]"},
        "buttons": {"key": "buttons", "type": "[CardAction]"},
        "shareable": {"key": "shareable", "type": "bool"},
        "autoloop": {"key": "autoloop", "type": "bool"},
        "autostart": {"key": "autostart", "type": "bool"},
        "aspect": {"key": "aspect", "type": "str"},
        "duration": {"key": "duration", "type": "str"},
        "value": {"key": "value", "type": "object"},
    }

    def __init__(self, **kwargs):
        super(VideoCard, self).__init__(**kwargs)
        self.title = kwargs.get("title", None)
        self.subtitle = kwargs.get("subtitle", None)
        self.text = kwargs.get("text", None)
        self.image = kwargs.get("image", None)
        self.media = kwargs.get("media", None)
        self.buttons = kwargs.get("buttons", None)
        self.shareable = kwargs.get("shareable", None)
        self.autoloop = kwargs.get("autoloop", None)
        self.autostart = kwargs.get("autostart", None)
        self.aspect = kwargs.get("aspect", None)
        self.duration = kwargs.get("duration", None)
        self.value = kwargs.get("value", None)
