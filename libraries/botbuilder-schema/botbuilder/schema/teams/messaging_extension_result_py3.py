# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class MessagingExtensionResult(Model):
    """Messaging extension result.

    :param attachment_layout: Hint for how to deal with multiple attachments.
     Possible values include: 'list', 'grid'
    :type attachment_layout: str or ~botframework.connector.teams.models.enum
    :param type: The type of the result. Possible values include: 'result',
     'auth', 'config', 'message', 'botMessagePreview'
    :type type: str or ~botframework.connector.teams.models.enum
    :param attachments: (Only when type is result) Attachments
    :type attachments:
     list[~botframework.connector.teams.models.MessagingExtensionAttachment]
    :param suggested_actions:
    :type suggested_actions:
     ~botframework.connector.teams.models.MessagingExtensionSuggestedAction
    :param text: (Only when type is message) Text
    :type text: str
    :param activity_preview: (Only when type is botMessagePreview) Message
     activity to preview
    :type activity_preview: ~botframework.connector.teams.models.Activity
    """

    _attribute_map = {
        "attachment_layout": {"key": "attachmentLayout", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "attachments": {"key": "attachments", "type": "[MessagingExtensionAttachment]"},
        "suggested_actions": {
            "key": "suggestedActions",
            "type": "MessagingExtensionSuggestedAction",
        },
        "text": {"key": "text", "type": "str"},
        "activity_preview": {"key": "activityPreview", "type": "Activity"},
    }

    def __init__(
        self,
        *,
        attachment_layout=None,
        type=None,
        attachments=None,
        suggested_actions=None,
        text: str = None,
        activity_preview=None,
        **kwargs
    ) -> None:
        super(MessagingExtensionResult, self).__init__(**kwargs)
        self.attachment_layout = attachment_layout
        self.type = type
        self.attachments = attachments
        self.suggested_actions = suggested_actions
        self.text = text
        self.activity_preview = activity_preview
